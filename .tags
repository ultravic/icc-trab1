!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	lib/datatypes.h	/^		double *A; 	\/\/ Matriz Original$/;"	m	struct:__anon2
ABS	lib/double_operations.h	28;"	d
ALLOC	lib/datatypes.h	65;"	d
ALLOC_SQ_MAT	lib/datatypes.h	67;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -lrt -lm$/;"	m
DEBUG	Makefile	/^DEBUG = -DDEBUG -g$/;"	m
ERROR	lib/error_handler.h	14;"	d
ERROR_PARAM	lib/error_handler.h	/^static const char ERROR_PARAM[] = "Parametros inválidos!\\nFavor usar:invmat [-e arquivo_entrada] [-o arquivo_saida] [-r N] -i k \\n";$/;"	v
ERROR_PARAM_NEGATIVE_K	lib/error_handler.h	/^static const char ERROR_PARAM_NEGATIVE_K[] =  "O numero de iterações deve ser >= 0! Abortando... \\nFavor usar:invmat [-i arquivo_entrada] [-o arquivo_saida] [-r N] -i k \\n";$/;"	v
ERROR_READING	lib/error_handler.h	/^static const char ERROR_READING[] =  "Erro! Não foi possível ler a entrada.\\n Abortando...";$/;"	v
ERROR_ZERO_DIVISION	lib/error_handler.h	/^static const char ERROR_ZERO_DIVISION[] = "Divisão por Zero!\\n Abortando... \\n";$/;"	v
ERROR_ZERO_PIVOT	lib/error_handler.h	/^static const char ERROR_ZERO_PIVOT[] = "Um dos Pivôs é Zero! Sistema possivelmente sem solução.\\n Abortando... \\n";$/;"	v
FREE_MATRIX_PACK	lib/datatypes.h	105;"	d
GET	lib/datatypes.h	152;"	d
I	lib/datatypes.h	/^		double *I; 	\/\/ Matriz indentidade$/;"	m	struct:__anon2
INIT_KAHAN	lib/datatypes.h	137;"	d
INIT_MATRIX	lib/datatypes.h	76;"	d
INIT_MATRIX_PACK	lib/datatypes.h	94;"	d
INIT_PARAM	lib/datatypes.h	123;"	d
IS_ZERO	lib/double_operations.h	37;"	d
K	lib/datatypes.h	/^		int K; \/\/ numero de iterações$/;"	m	struct:__anon4
KAHAN_SUM	lib/double_operations.h	45;"	d
L	lib/datatypes.h	/^		double *L; 	\/\/ Matriz de Multiplicadores$/;"	m	struct:__anon2
N	lib/datatypes.h	/^		int N; \/\/ tamanho caso randomico$/;"	m	struct:__anon4
OBJ	Makefile	/^OBJ = invmat.o matrix_generator.o matrix_solver.o partial_pivoting.o result_refinement.o gauss_elimination.o io.o time_measurement.o error_handler.o$/;"	m
R	lib/datatypes.h	/^		double *R; 	\/\/ Matriz de resíduos$/;"	m	struct:__anon2
SET	lib/datatypes.h	165;"	d
SQ	lib/datatypes.h	55;"	d
SUCCESS	lib/error_handler.h	17;"	d
TRIANGLE_SIZE	lib/datatypes.h	87;"	d
TRUE_ONE	lib/double_operations.h	20;"	d
TRUE_ZERO	lib/double_operations.h	17;"	d
U	lib/datatypes.h	/^		double *U; 	\/\/ Matriz escalonada$/;"	m	struct:__anon2
W	lib/datatypes.h	/^		double *W; 	\/\/ Matriz novo X (A*W = R)$/;"	m	struct:__anon2
X	lib/datatypes.h	/^		double *X; 	\/\/ Matriz resultante (U*X = Y)$/;"	m	struct:__anon2
Y	lib/datatypes.h	/^		double *Y; 	\/\/ Matriz temporária (L*Y = B)$/;"	m	struct:__anon2
__DATATYPES__	lib/datatypes.h	14;"	d
__DOUBLE_OPERATIONS__	lib/double_operations.h	13;"	d
__ERROR_HANDLER__	lib/error_handler.h	11;"	d
__GAUSS_ELIMINATION__	lib/gauss_elimination.h	13;"	d
__IO__	lib/io.h	13;"	d
__MATRIX_GENERATOR__	lib/matrix_generator.h	10;"	d
__MATRIX_SOLVER__	lib/matrix_solver.h	12;"	d
__PARTIAL_PIVOTING__	lib/partial_pivoting.h	13;"	d
__RESULT_REFINAMENT__	lib/result_refinement.h	13;"	d
__TIME_MEASUREMENT__	lib/time_measurement.h	11;"	d
backwardSubstitution	src/matrix_solver.c	/^void backwardSubstitution(double **A, double **B, double **X, int length) {$/;"	f
c	lib/datatypes.h	/^	    double c; \/\/ compensação$/;"	m	struct:__anon3
die	src/error_handler.c	/^void die(char const reason[]) {$/;"	f
forwardSubstitution	src/matrix_solver.c	/^void forwardSubstitution(double **A, double **X, double **B, int *line_map, int length) {$/;"	f
gaussElimination	src/gauss_elimination.c	/^void gaussElimination(double **A, double **L, double **U, int *line_map, int n)$/;"	f
generateIdentityMatrix	src/matrix_generator.c	/^double* generateIdentityMatrix(int length){$/;"	f
generateLineMap	src/matrix_generator.c	/^int* generateLineMap(int length) {$/;"	f
generateRandomSquareMatrix	src/matrix_generator.c	/^double *generateRandomSquareMatrix(int length) {$/;"	f
in_file	lib/datatypes.h	/^		char *in_file; \/\/ arquivo de entrada$/;"	m	struct:__anon4
length	lib/datatypes.h	/^		int length; \/\/ Largura das Matrizes$/;"	m	struct:__anon2
lineTimesColumn	src/result_refinement.c	/^double lineTimesColumn(double **A, double **B, int line, int column, int length)$/;"	f
main	src/invmat.c	/^int main(int argc, char const *argv[]) {$/;"	f
matrix	lib/datatypes.h	/^		double * matrix; \/\/ matriz$/;"	m	struct:__anon1
matrixPack	lib/datatypes.h	/^	} matrixPack;$/;"	t	typeref:struct:__anon2
normCalc	src/result_refinement.c	/^double normCalc(double **R, int length)$/;"	f
out_file	lib/datatypes.h	/^		char *out_file; \/\/ arquivo de saída$/;"	m	struct:__anon4
param	lib/datatypes.h	/^	}param;$/;"	t	typeref:struct:__anon4
parseParameters	src/io.c	/^int parseParameters(int argc, char const *argv[], param *P) {$/;"	f
partialPivoting	src/partial_pivoting.c	/^void partialPivoting(double **M, int pos, int *line_map, int length){$/;"	f
printIndexes	src/io.c	/^void printIndexes(int *line_map, int length)$/;"	f
printMapped	src/io.c	/^void printMapped(double **matrix, int *line_map, int length)$/;"	f
printMatrixL	src/io.c	/^void printMatrixL(double **matrix, int length)$/;"	f
printNormal	src/io.c	/^void printNormal(double **matrix, int length)$/;"	f
printfMapped	src/io.c	/^void printfMapped(double **matrix, int *line_map, FILE *file, int length)$/;"	f
random	lib/datatypes.h	/^		bool random; \/\/ random$/;"	m	struct:__anon4
readMatrix	src/io.c	/^int readMatrix(matrixPack *M, char *file_path) {$/;"	f
residueCalc	src/result_refinement.c	/^void residueCalc(double **A, double **X, double **I, double **R, int length)$/;"	f
src	Makefile	/^src = $(wildcard *.c)$/;"	m
sum	lib/datatypes.h	/^	    double sum; \/\/ soma$/;"	m	struct:__anon3
sumMatrix	src/result_refinement.c	/^void sumMatrix(double **A, double **B, int length) $/;"	f
t_kahan	lib/datatypes.h	/^	} t_kahan;$/;"	t	typeref:struct:__anon3
t_matrix	lib/datatypes.h	/^	} t_matrix;$/;"	t	typeref:struct:__anon1
timestamp	src/time_measurement.c	/^double timestamp(void){$/;"	f
to_file	lib/datatypes.h	/^		bool to_file; \/\/ tem arquivo para saida$/;"	m	struct:__anon4
